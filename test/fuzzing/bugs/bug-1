√ Title
[H-01] Arithmetic overflow can happen in commit phase which can break the game

√ Invariant
TIME-01: commitMove must not revert

√ Description
When a player create a game, "_timeoutInterval" should be set by the player. It will be used for reveal phase.
But if "_timeoutInterval" is too high, it will cause "Arithmetic overflow" in commitMove() and break the game.
Here is more technical details. 
There is a possibility that revealDeadline reaches to 2^256-1 (max of uint256) and cause overflow in commitMove() by this 
logic `game.revealDeadline = block.timestamp + game.timeoutInterval;`. then the transaction will be reverted.
The "timeoutInterval" is set by the player when createGameWithEth() is called.
RockPaperScissors.sol#L219

√ Impact
When this issue happens, the game participants cannot take back their bet. It will be locked in the contract forever.
There is "cancelGame()" function that withdraws the bet, but it requires the game to be in "Created" state and when "commitMove()" is called, the game state is changed to "Committed".
If the game state is "Committed", users cannot cancel the game.

√ Recommendation
Limit "_timeoutInterval" to a reasonable value. 
The max value of uint256 (_timeoutInterval) is unrealistic. It's approximately 2.66 * 10⁵⁹ times longer than the age of the universe (about 13.8 billion years).

√ PoC
test/fuzzing/bugs/poc/bug-1.sol

√ Steps to reproduce (Debug logs)
Call sequence:
    Fuzz.createGame(3520814048892874906415526730303147317428128352495957196790214610038442751,115792089237316195423570985008687907853269984665640564039457584007913129639922,16797404009085167003467514634481863348112252453831081409538233477390)
    Fuzz.joinGame()
    Fuzz.commitMove()
    Fuzz.commitMove() Time delay: 305 seconds Block delay: 1

Traces: 
call 0xee35211C4D9126D520bBfeaf3cFee5FE7B86F221::accumulatedFees() (/Users/kim/dev/2025-04-rock-paper-scissors/test/fuzzing/BeforeAfter.sol:44)
 └╴← (0)
call HEVM::prank(Properties_TIME) (/Users/kim/dev/2025-04-rock-paper-scissors/test/fuzzing/HandlerRockPaperScissors.sol:150)
 └╴← 0x
call 0xee35211C4D9126D520bBfeaf3cFee5FE7B86F221::commitMove(0, 0xf0f6aaf73de9acb314a77e1981f698211db59f5e203d617225c80af9811ef7b6) (/Users/kim/dev/2025-04-rock-paper-scissors/test/fuzzing/HandlerRockPaperScissors.sol:153)
 ├╴emit MoveCommitted(gameId=0, player=Properties_TIME, currentTurn=1) <no source map>
 └╴error Revert Panic(0x4e487b710000000000000000000000000000000000000000000000000000000000000011) <no source map>
call Fuzzlib::t(bool,string)(false, 0xa15f9f0700000000000000000000000000) (/Users/kim/dev/2025-04-rock-paper-scissors/test/fuzzing/HandlerRockPaperScissors.sol:157)
 ├╴emit AssertFail(0xa15f9f0700000000000000000000000000) (/Users/kim/dev/2025-04-rock-paper-scissors/node_modules/@perimetersec/fuzzlib/src/helpers/HelperAssert.sol:20)
 ├╴call PlatformCrytic::assertFail()() (/Users/kim/dev/2025-04-rock-paper-scissors/node_modules/@perimetersec/fuzzlib/src/helpers/HelperAssert.sol:21)
 │  └╴error Revert Panic(0x4e487b710000000000000000000000000000000000000000000000000000000000000001) (/Users/kim/dev/2025-04-rock-paper-scissors/node_modules/@perimetersec/fuzzlib/src/platform/PlatformCrytic.sol:7)
 └╴error Revert Panic(0x4e487b710000000000000000000000000000000000000000000000000000000000000001) (/Users/kim/dev/2025-04-rock-paper-scissors/node_modules/@perimetersec/fuzzlib/src/Fuzzlib.sol:11)
